name: Android CI

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store
  playstore_name: Frogobox ID

on:
  # Triggers the workflow on push or pull request events but only for default and protected branches
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        run: ./gradlew test

      - name: Archive APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

      # Step: Set up Android Emulator
      - name: Set up Android Emulator
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          target: android-30
          arch: x86_64
          profile: default
          emulator-locale: en-US
          script: echo y | sdkmanager "system-images;android-30;google_apis;x86_64"

      # Step: Start Emulator
      - name: Start Emulator
        run: |
          adb devices
          echo no | avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" -d "pixel"
          emulator -avd test -no-snapshot-save -no-window -gpu swiftshader_indirect &

      # Step: Wait for Emulator to Start
      - name: Wait for Emulator
        run: adb wait-for-device
        timeout-minutes: 3

      # Step: Install Appium
      - name: Install Appium
        run: npm install -g appium

      # Step: Run Placeholder Appium Test
      - name: Run Appium Test
        run: |
          echo "Starting Appium server"
          appium --version
          echo "Placeholder test complete"

